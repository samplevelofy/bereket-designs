---
import MainLayout from '../../../layouts/MainLayout.astro';
import { supabase } from '../../../lib/supabase';
import type { Design } from '../../../lib/types';
import '../../../styles/admin.css';

// This page must be server-rendered to fetch data for any ID
export const prerender = false;

const { id } = Astro.params;
let design: Design | null = null;

if (id) {
  const { data } = await supabase.from('designs').select('*').eq('id', id).single();
  design = data;
}

if (!design) {
  return new Response("Design project not found", { status: 404 });
}
---
<MainLayout title={`Edit: ${design.title}`}>
  <div class="admin-panel">
    <header class="admin-header">
      <h1>Edit Project</h1>
      <a href="/admin" class="back-link">&larr; Back to Admin Panel</a>
    </header>
    <section class="admin-section">
      <form id="edit-design-form" class="product-form">
        <!-- Hidden inputs to hold the ID and the final image URL -->
        <input type="hidden" name="id" value={design.id} />
        <input type="hidden" name="cover_image" id="cover-image-url" value={design.cover_image || ''} />

        <div class="form-row">
          <label>Title<input type="text" name="title" value={design.title} required /></label>
          <label>Client<input type="text" name="client" value={design.client || ''} /></label>
        </div>
        <label>Project Type<input type="text" name="project_type" value={design.project_type || ''} /></label>
        <label>Summary (for the homepage card)<textarea name="summary" rows="2" required>{design.summary || ''}</textarea></label>
        <label>Creative Brief (the full story)<textarea name="creative_brief" rows="6">{design.creative_brief || ''}</textarea></label>
        <label>Tools Used (comma-separated)<input type="text" name="tools_used" value={design.tools_used?.join(', ') || ''} /></label>
        
        <label>Replace Cover Image (Optional)<input type="file" id="cover-image-upload" accept="image/*" /></label>
        <div class="image-preview-wrapper">
          <span>Current:</span>
          <img src={design.cover_image} alt="Current cover image" class="image-preview" />
        </div>

        <div class="form-actions">
          <div class="upload-status" id="form-status"></div>
          <a href="/admin" class="btn btn-secondary">Cancel</a>
          <button type="submit" id="submit-btn" class="btn btn-primary">Save Changes</button>
        </div>
      </form>
    </section>
  </div>
</MainLayout>
<script>
  // --- Type-Safe Element Selectors ---
  const editForm = document.getElementById('edit-design-form') as HTMLFormElement | null;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement | null;
  const formStatus = document.getElementById('form-status') as HTMLDivElement | null;
  const imageUploadInput = document.getElementById('cover-image-upload') as HTMLInputElement | null;
  const coverImageUrlInput = document.getElementById('cover-image-url') as HTMLInputElement | null;

  // --- Fully Included uploadFile function ---
  async function uploadFile(file: File): Promise<string> {
    const response = await fetch('/api/designs/upload', {
      method: 'POST', body: file, headers: { 'Content-Type': file.type }
    });
    if (!response.ok) {
      const result = await response.json();
      throw new Error(`Upload failed: ${result.error || 'Unknown error'}`);
    }
    const result = await response.json();
    return result.url;
  }

  // --- Edit Project Event Listener ---
  editForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!submitBtn || !formStatus || !imageUploadInput || !coverImageUrlInput) return;

    submitBtn.disabled = true;
    formStatus.textContent = 'Processing...';

    try {
      const newImageFile = imageUploadInput.files?.[0];

      // Step 1: Upload a new image IF one was selected
      if (newImageFile) {
        formStatus.textContent = 'Uploading new image...';
        const newImageUrl = await uploadFile(newImageFile);
        coverImageUrlInput.value = newImageUrl; // Update the hidden input with the new URL
      }
      
      formStatus.textContent = 'Saving changes...';

      // Step 2: Gather all form data
      const formData = new FormData(editForm);
      const designData = {
        id: formData.get('id'), // Crucially, include the ID
        title: formData.get('title'),
        client: formData.get('client'),
        project_type: formData.get('project_type'),
        summary: formData.get('summary'),
        creative_brief: formData.get('creative_brief'),
        cover_image: formData.get('cover_image'), // This will be the new URL or the old one
        tools_used: (formData.get('tools_used') as string).split(',').map(t => t.trim()).filter(Boolean),
      };

      // Step 3: Send the data to the update API
      const response = await fetch('/api/designs/update', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(designData)
      });

      if (!response.ok) {
        const result = await response.json();
        throw new Error(`Failed to update project: ${result.error}`);
      }

      alert('Project updated successfully!');
      window.location.href = '/admin'; // Redirect back to the admin panel

    } catch (err) {
      const error = err as Error;
      alert(`Error: ${error.message}`);
      submitBtn.disabled = false;
      formStatus.textContent = '';
    }
  });
</script>